package com.jcmore2.collage;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.RelativeLayout;

/**
 * 
 * Collage View is the parent view of a collage items.
 * 
 * @author Juan Carlos Moreno (jcmore2@gmail.com)
 * 
 */
public class CollageView extends RelativeLayout {

	private Context mContext;

	private final String BG = "#FFD4B081";

	private int collageWidth;
	private int collageHeight;

	private List<CardView> listItems = new ArrayList<CardView>();
	private boolean isViewRefresh = false;
	private boolean isCollageFixed = false;

	private final Random random = new Random();

	public CollageView(Context context) {
		this(context, null);
		init(context);
	}

	public CollageView(Context context, AttributeSet attrs) {
		this(context, attrs, 0);
		init(context);
	}

	public CollageView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		init(context);
	}

	private void init(Context context) {
		mContext = context;
		this.setMotionEventSplittingEnabled(true);
		this.setBackgroundColor(Color.parseColor(BG));

	}

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

		collageWidth = MeasureSpec.getSize(widthMeasureSpec);

		collageHeight = MeasureSpec.getSize(heightMeasureSpec);

		refreshViews();

		super.onMeasure(widthMeasureSpec, heightMeasureSpec);

	}

	@Override
	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
	}

	private void addViewToList(CardView ci) {
		listItems.add(ci);
	}

	private void refreshViews() {
		if (!listItems.isEmpty() && !isViewRefresh) {
			for (CardView collageItemView : listItems) {
				RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(
						collageItemView.getDrawable().getIntrinsicWidth(),
						collageItemView.getDrawable().getIntrinsicHeight());
				int left = random.nextInt(collageWidth) - collageWidth / 4;
				int top = random.nextInt(collageHeight);
				params.leftMargin = left;
				params.topMargin = top;
				params.rightMargin = -left;
				params.bottomMargin = -top;

				if (isCollageFixed)
					collageItemView.setFixedItem();

				this.addView(collageItemView, params);

			}
			isViewRefresh = true;
		}
	}

	/**
	 * Methos use to set Collage fixed (Cards cant move)
	 * 
	 * @param fixedCollage
	 */
	public void setFixedCollage(boolean fixedCollage) {
		isCollageFixed = fixedCollage;
	}

	/**
	 * Add Card from Bitmap
	 * 
	 * @param bm
	 */
	public void addCard(Bitmap bm) {

		CardView ci = new CardView(mContext);
		ci.setImageBitmap(bm);
		addViewToList(ci);
	}

	/**
	 * Add Card from Drawable
	 * 
	 * @param drawable
	 */
	public void addCard(Drawable drawable) {

		CardView ci = new CardView(mContext);
		ci.setImageDrawable(drawable);
		addViewToList(ci);
	}

	/**
	 * Add Card from resources
	 * 
	 * @param resId
	 */
	public void addCard(int resId) {

		CardView ci = new CardView(mContext);
		ci.setImageResource(resId);
		addViewToList(ci);
	}

	/**
	 * Create a Collage from list of Bitmaps
	 * 
	 * @param bmList
	 *            List of bitmaps
	 */
	public void createCollageBitmaps(List<Bitmap> bmList) {
		for (Bitmap bm : bmList) {
			addCard(bm);
		}
	}

	/**
	 * Create a Collage from list of Drawables
	 * 
	 * @param drawableList
	 *            List of Drawables
	 */
	public void createCollageDrawables(List<Drawable> drawableList) {
		for (Drawable drawable : drawableList) {
			addCard(drawable);
		}
	}

	/**
	 * Create a Collage from list of Resources
	 * 
	 * @param resIdList
	 *            List of resources
	 */
	public void createCollageResources(List<Integer> resIdList) {

		for (Integer res : resIdList) {
			addCard(res.intValue());
		}
	}
}